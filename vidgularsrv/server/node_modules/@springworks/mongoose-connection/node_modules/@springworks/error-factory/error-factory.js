'use strict';

var util = require('util');
var boom = require('boom');
var slice = Array.prototype.slice;
var internals = {
  IS_TEST: process.env.NODE_ENV === 'test',
  DEFAULT_ERROR_CODE: 500,
  HTTP_STATUS_CODES: {
    400: 'Bad Request',
    401: 'Unauthorized',
    402: 'Payment Required',
    403: 'Forbidden',
    404: 'Not Found',
    405: 'Method Not Allowed',
    406: 'Not Acceptable',
    407: 'Proxy Authentication Required',
    408: 'Request Timeout',
    409: 'Conflict',
    410: 'Gone',
    411: 'Length Required',
    412: 'Precondition Failed',
    413: 'Request Entity Too Large',
    414: 'Request-URI Too Long',
    415: 'Unsupported Media Type',
    416: 'Requested Range Not Satisfiable',
    417: 'Expectation Failed',
    418: 'I\'m a teapot',
    422: 'Unprocessable Entity',
    423: 'Locked',
    424: 'Failed Dependency',
    425: 'Unordered Collection',
    426: 'Upgrade Required',
    428: 'Precondition Required',
    429: 'Too Many Requests',
    431: 'Request Header Fields Too Large',
    500: 'Internal Server Error',
    501: 'Not Implemented',
    502: 'Bad Gateway',
    503: 'Service Unavailable',
    504: 'Gateway Timeout',
    505: 'HTTP Version Not Supported',
    506: 'Variant Also Negotiates',
    507: 'Insufficient Storage',
    508: 'Loop Detected',
    510: 'Not Extended',
    511: 'Network Authentication Required'
  }
};


/**
 * Creates an error object using the defined params.
 *
 * @param {Number} code Error code, should match a HTTP status code.
 * @param {String} message Format string for message containing % specifiers.
 * @param {...*} var_args Values `message` is to be filled with.
 * @return {Error} A new Error with extra sugar.
 */
exports.create = function(code, message, var_args) {
  var error_code = internals.HTTP_STATUS_CODES.hasOwnProperty(code) ? Number(code) : internals.DEFAULT_ERROR_CODE;
  var formatted_message = internals.format(arguments, 1, internals.HTTP_STATUS_CODES[error_code]);
  var output_error = boom.create(error_code, formatted_message);

  output_error.id = internals.generateErrorId();
  output_error.code = output_error.statusCode = error_code;
  output_error.message = formatted_message;
  output_error.body = output_error.json = { message: formatted_message };

  // Attach methods
  output_error.toJSON = internals.toJSON;
  output_error.appendMissingResource = internals.appendMissingResource;
  output_error.appendMissingField = internals.appendMissingField;
  output_error.appendMissingFields = internals.appendMissingFields;
  output_error.appendJoiValidationError = internals.appendJoiValidationError;
  output_error.appendResourceAlreadyExists = internals.appendResourceAlreadyExists;
  output_error.appendInvalidField = internals.appendInvalidField;
  output_error.appendValidationError = internals.appendValidationError;

  if (internals.IS_TEST) {
    output_error.toString = internals.toStringDebug;
  }

  return output_error;
};


/**
 * Creates an error object using the defined params.
 * Status code will be `422 Unprocessable Entity` and the message will
 *   default to 'Validation Failed'.
 *
 * @param {String} message Format string for message containing % specifiers.
 * @param {...*} var_args Values `message` is to be filled with.
 * @return {Error} A new Error with code 422 and an error message.
 */
exports.validationError = function(message, var_args) {
  return exports.create(422, internals.format(arguments, 0, 'Validation Failed'));
};


/**
 * Used by the JSON.stringify method for JSON serialization.
 *
 * @this Boom
 * @return {Object} An object with a message property.
 */
internals.toJSON = function() {
  return this.json;
};


internals.toStringDebug = function() {
  return 'Error: ' + this.message + ': ' + JSON.stringify(this.output, null, 1).replace(/\s+/g, ' ');
};


/**
 * This means a resource does not exist.
 *
 * @this Boom
 * @param {String} resource Name of the resource, e.g. 'User'.
 * @return {Error} The instance.
 */
internals.appendMissingResource = function(resource) {
  return internals.appendValidationError(this, 'missing', resource);
};


/**
 * This means a required field on a resource has not been set.
 *
 * @this Boom
 * @param {String} resource Name of the resource, e.g. 'User'.
 * @param {String} field Name of the field, e.g. 'email'.
 * @return {Error} The instance.
 */
internals.appendMissingField = function(resource, field) {
  return internals.appendValidationError(this, 'missing_field', resource, field);
};


/**
 * Appends multiple missing fields.
 *
 * @this Boom
 * @see appendMissingField
 * @param {String} resource Name of the resource, e.g. 'User'.
 * @param {Array} fields Array of missing field names (strings).
 * @return {Error} The instance.
 */
internals.appendMissingFields = function(resource, fields) {
  fields.forEach(function(field) {
    this.appendMissingField(resource, field);
  }, this);
  return this;
};


/**
 * Appends a Joi Validation Error.
 *
 * @this Boom
 * @param  {String} resource    Name of the resource, e.g. 'User'.
 * @param  {Object} joi_error   The Joi validation error.
 * @return {Error}           The instance.
 */
internals.appendJoiValidationError = function(resource, joi_error) {
  // Attach some metadata
  this.output.payload.resource = resource;
  this.output.payload.validation = {};

  /* istanbul ignore else */
  /* We're just returning the error without the meta */
  if (Array.isArray(joi_error.details)) {
    joi_error.details.forEach(function(value) {
      if (value.type.indexOf('required') > -1) { // Check type of error.
        this.appendMissingField(resource, value.path);
      }
      else {
        this.appendInvalidField(resource, value.path);
      }

      // Append to the Boom meta data-part
      this.output.payload.validation[value.path] = value.message;
    }, this);
  }

  return this;
};


/**
 * This means the formatting of a field is invalid.
 * The documentation for the resource should be able to give
 * more specific information.
 *
 * @this Boom
 * @param {String} resource Name of the resource, e.g. 'User'.
 * @param {String} field Name of the field, e.g. 'email'.
 * @return {Error} The instance.
 */
internals.appendInvalidField = function(resource, field) {
  return internals.appendValidationError(this, 'invalid', resource, field);
};


/**
 * This means another resource has the same value as this field.
 * This can happen in resources that must have some unique key.
 *
 * @this Boom
 * @param {String} resource Name of the resource, e.g. 'User'.
 * @param {String} field Name of the field, e.g. 'email'.
 * @return {Error} The instance.
 */
internals.appendResourceAlreadyExists = function(resource, field) {
  return internals.appendValidationError(this, 'already_exists', resource, field);
};


/**
 * Format an arguments collection starting at `start`.
 *
 * @param {Arguments} args The arguments collection.
 * @param {Number} start The index in `args` of the format string. Any argument
 *   after this index is passed to util.format as extra arguments.
 * @param {String} default_str Format string to use if the argument at `start`
 *   is falsy.
 * @return {String} A formatted string.
 */
internals.format = function(args, start, default_str) {
  var str = args[start] || default_str;
  if (args.length > start + 1) {
    var format_args = slice.call(args, start);
    format_args[0] = str;
    str = util.format.apply(null, format_args);
  }
  return str;
};


/**
 * Append a validation error to a `Error` instance.
 *
 * @param {Error} err The `Error` instance.
 * @param {String} code Type of validation error.
 * @param {String} resource Name of the resource, e.g. 'User'.
 * @param {String} field Name of the field, e.g. 'email'.
 * @return {Error} The instance.
 */
internals.appendValidationError = function(err, code, resource, field) {
  (err.json.errors || (err.json.errors = [])).push({
    resource: String(resource),
    field: field ? String(field) : undefined,
    code: code
  });
  return err;
};


internals.generateErrorId = function() {
  return String(Date.now()) + String(Math.random()).substr(2);
};


/* istanbul ignore else */
if (internals.IS_TEST) {
  /** @protected */
  exports.internals = internals;
}
