'use strict';

var Joi = require('joi');
var ErrorFactory = require('..');

describe('error-factory/joi-validation-support', function() {
  var schema;
  var validation_options = {
    abortEarly: false,
    stripUnknown: true
  };

  before(function() {
    schema = Joi.object().required().keys({
      field_should_be_missing: Joi.string().required(),
      field_should_have_invalid_data_type: Joi.number().required(),
      subKey: Joi.object().keys({
        validDataType: Joi.string().required()
      })
    });
  });

  it('should be possible to create an Error from a Joi Validation Error', function() {
    var data = {
      field_should_have_invalid_data_type: 'foobar',
      subKey: {
        validDataType: 'barfoo'
      }
    };
    var validated = Joi.validate(data, schema, validation_options);
    var err = ErrorFactory.validationError();

    // Append the Joi error object
    err.appendJoiValidationError('resource', validated.error);

    err.toJSON().should.eql({
      message: 'Validation Failed',
      errors: [
        {
          resource: 'resource',
          field: 'field_should_be_missing',
          code: 'missing_field'
        },
        {
          resource: 'resource',
          field: 'field_should_have_invalid_data_type',
          code: 'invalid'
        }
      ]
    });

    // Old error format (For Restify)
    err.should.have.property('statusCode', 422);
    err.should.have.property('code', 422);
    err.should.have.property('message', 'Validation Failed');
    err.should.have.property('json');
    err.should.have.property('body');

    // Added boom properties
    err.should.have.property('data');
    err.should.have.property('isBoom', true);
    err.should.have.property('reformat');

    // Boom output
    err.should.have.propertyByPath('output', 'statusCode').eql(422);
    err.should.have.propertyByPath('output', 'payload');

    err.should.have.propertyByPath('output', 'payload', 'statusCode').eql(422);
    err.should.have.propertyByPath('output', 'payload', 'message').eql('Validation Failed');
    err.should.have.propertyByPath('output', 'payload', 'error').eql('Unprocessable Entity');
    err.should.have.propertyByPath('output', 'payload', 'resource').eql('resource');
  });

});
