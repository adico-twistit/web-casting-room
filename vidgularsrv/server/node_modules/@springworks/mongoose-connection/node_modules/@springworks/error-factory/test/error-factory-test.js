'use strict';

var factory = require('..');

describe(__filename, function() {

  describe('Creating an error', function() {

    it('should define the error code', function() {
      var err = factory.create(400);
      err.should.have.property('code', 400);
      err.should.have.property('message', 'Bad Request');
    });

    it('should default to error 500', function() {
      var err = factory.create();
      err.should.have.property('code', 500);
      err.should.have.property('message', 'Internal Server Error');
    });

    it('should set a message if provided', function() {
      var err = factory.create(400, 'Invalid param: age');
      err.should.have.property('code', 400);
      err.should.have.property('message', 'Invalid param: age');
    });

    it('should set a default code and message if omitted', function() {
      var err = factory.create(null, null);
      err.should.have.property('code', 500);
      err.should.have.property('message', 'Internal Server Error');
    });

    it('should default to 500 with a non-HTTP status code', function() {
      var err = factory.create(1500, null);
      err.should.have.property('code', 500);
    });

    it('should support printf-like formated message', function() {
      var err = factory.create(400, 'Invalid param: %s, use', 'x', 'y');
      err.should.have.property('code', 400);
      err.should.have.property('message', 'Invalid param: x, use y');
    });

    it('should format default message', function() {
      var err = factory.create(400, null, 'foo', 'bar');
      err.should.have.property('code', 400);
      err.should.have.property('message', 'Bad Request foo bar');
    });

    it('should set statusCode property', function() {
      var err = factory.create(404);
      err.should.have.property('statusCode', 404);
    });

    it('should capture stack trace', function() {
      var err = factory.create();
      err.should.have.property('stack');
      err.stack.should.be.a.String();
    });

    it('should generate an error ID', function() {
      var err = factory.create();
      err.should.have.property('id');
    });

    it('should generate a unique ID for each error', function() {
      var err1 = factory.create(),
          err2 = factory.create();
      err1.id.should.not.eql(err2.id);
    });

  });

  describe('Converting an error to JSON', function() {

    it('should implement toJSON', function() {
      var err = factory.create(500, 'my message');
      err.toJSON.should.be.a.Function();
      err.toJSON().should.eql({ message: 'my message' });
    });

    it('should only serialize message', function() {
      var err = factory.create(500, 'my message');
      var json = JSON.stringify(err);
      json.should.be.a.String();
      json.should.eql('{"message":"my message"}');
    });

  });

  describe('Converting an error to string', function() {
    var original_test_mode = factory.internals.IS_TEST;

    afterEach(function() {
      factory.internals.IS_TEST = original_test_mode;
    });

    it('should return a helpful debug string if env is test', function() {
      var err = factory.create(500, 'my message');
      err.toString().should.eql(
          'Error: my message: { "statusCode": 500, "payload": ' +
          '{ "statusCode": 500, "error": "Internal Server Error", ' +
          '"message": "An internal server error occurred" }, "headers": {} }');
    });

    it('should use the normal toString if not in test env', function() {
      factory.internals.IS_TEST = false;
      var err = factory.create(500, 'my message');
      err.toString().should.eql('Error: my message');
    });

  });

  describe('Creating validation errors', function() {

    it('should create a 422 error', function() {
      var err = factory.validationError();
      err.should.have.property('code', 422);
      err.should.have.property('message', 'Validation Failed');
    });

    it('should support printf-like formated message', function() {
      var err = factory.validationError('msg: %s', 'x', 'y');
      err.should.have.property('code', 422);
      err.should.have.property('message', 'msg: x y');
    });

    it('should format default message', function() {
      var err = factory.validationError('', 'x', 'y');
      err.should.have.property('code', 422);
      err.should.have.property('message', 'Validation Failed x y');
    });

  });

  describe('Appending validation errors', function() {

    describe('appendMissingResource', function() {

      it('should append a description of the error', function() {
        var err = factory.validationError(),
            json;

        err.appendMissingResource('User');

        err.toJSON().should.eql({
          message: 'Validation Failed',
          errors: [{
            resource: 'User',
            field: undefined,
            code: 'missing'
          }]
        });

        json = JSON.stringify({
          message: 'Validation Failed',
          errors: [{
            resource: 'User',
            code: 'missing'
          }]
        });
        JSON.stringify(err).should.eql(json);
      });

    });

    describe('appendMissingField', function() {

      it('should append a description of the error', function() {
        var err = factory.validationError();
        err.appendMissingField('User', 'email');
        err.toJSON().should.eql({
          message: 'Validation Failed',
          errors: [{
            resource: 'User',
            field: 'email',
            code: 'missing_field'
          }]
        });
      });

    });

    describe('appendMissingFields', function() {
      it('should append all descriptions of the error', function() {
        var err = factory.validationError(),
            missing = ['email', 'name'];
        err.appendMissingFields('User', missing);
        err.toJSON().should.eql({
          message: 'Validation Failed',
          errors: [{
            resource: 'User',
            field: 'email',
            code: 'missing_field'
          },
            {
              resource: 'User',
              field: 'name',
              code: 'missing_field'
            }]
        });
      });
    });

    describe('appendInvalidField', function() {

      it('should append a description of the error', function() {
        var err = factory.validationError();
        err.appendInvalidField('User', 'email');
        err.toJSON().should.eql({
          message: 'Validation Failed',
          errors: [{
            resource: 'User',
            field: 'email',
            code: 'invalid'
          }]
        });
      });

    });

    describe('appendResourceAlreadyExists', function() {

      it('should append a description of the error', function() {
        var err = factory.validationError();
        err.appendResourceAlreadyExists('User', 'email');
        err.toJSON().should.eql({
          message: 'Validation Failed',
          errors: [{
            resource: 'User',
            field: 'email',
            code: 'already_exists'
          }]
        });
      });

    });

    describe('Appending multiple validation errors', function() {

      it('should append all errors and be chainable', function() {
        var error = factory.validationError();

        error.appendMissingResource('Thing')
            .appendMissingField('User', 'name')
            .appendInvalidField('User', 'password')
            .appendResourceAlreadyExists('User', 'email');

        error.toJSON().should.eql({
          message: 'Validation Failed',
          errors: [{
            resource: 'Thing',
            field: undefined,
            code: 'missing'
          }, {
            resource: 'User',
            field: 'name',
            code: 'missing_field'
          }, {
            resource: 'User',
            field: 'password',
            code: 'invalid'
          }, {
            resource: 'User',
            field: 'email',
            code: 'already_exists'
          }]
        });
      });

    });

  });


});
