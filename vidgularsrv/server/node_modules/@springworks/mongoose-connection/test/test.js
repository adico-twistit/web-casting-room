var mconn = require('..');
var should = require('should');
var mongodbFs = require('mongodb-fs');
var TEST_URI = 'mongodb://localhost:27027/test-db';
var testLogger = {};

function uniqstr() {
  return Date.now().toString(36) + Math.random().toString(35).substr(-8);
}


before(function(done) {
  mongodbFs.init({
    port: 27027,
    mocks: {
      'test-db': {}
    }
  });
  mongodbFs.start(done);
});


after(function(done) {
  mongodbFs.stop(done);
});


describe('Setup', function() {

  it('should create a wrapper object', function() {
    var mc = mconn(uniqstr(), TEST_URI, testLogger);

    should.exist(mc);
    mc.connection.should.be.a.Function();
    mc.connect.should.be.a.Function();
    mc.disconnect.should.be.a.Function();

    mc.connection().should.be.an.Object();
  });

  it('should reuse connection wrapper if name and uri is same', function() {
    var name = uniqstr();
    var mc_1 = mconn(name, TEST_URI, testLogger);
    var mc_2 = mconn(name, TEST_URI, testLogger);

    should.exist(mc_1);
    should.exist(mc_1 === mc_2);

    mc_1.connection().should.be.an.Object();
    should.exist(mc_1.connection() === mc_2.connection());
  });

  it('should not fail if logger does not implement a method for the log level', function(done) {
    var not_a_logger = {};
    var mc = mconn(uniqstr(), TEST_URI, not_a_logger);

    mc.connect(function(err) {
      should.not.exist(err);
      mc.disconnect(done);
    });
  });

});

describe('Connection', function() {

  it('should be able to connect and disconnect', function(done) {
    var mc = mconn(uniqstr(), TEST_URI, testLogger);

    mc.connect(function(err) {
      should.not.exist(err);
      mc.disconnect(done);
    });
  });

  it('should be able to call connect while connecting', function(done) {
    var mc = mconn(uniqstr(), TEST_URI, testLogger);
    var did_call_1 = false;
    var did_call_2 = false;

    mc.connect(function(err) {
      should.not.exist(err);
      did_call_1 = true;
      if (did_call_2) {
        mc.disconnect(done);
      }
    });

    mc.connect(function(err) {
      should.not.exist(err);
      did_call_2 = true;
      if (did_call_1) {
        mc.disconnect(done);
      }
    });
  });

  it('should fail if URI is invalid', function(done) {
    var mc = mconn(uniqstr(), 'invalid uri', testLogger);

    mc.connect(function(err) {
      should.exist(err);
      done();
    });
  });

  it('should be able to call connect after connected', function(done) {
    var mc = mconn(uniqstr(), TEST_URI, testLogger);

    mc.connect(function(err) {
      should.not.exist(err);

      mc.connect(function(err) {
        should.not.exist(err);
        mc.disconnect(done);
      });
    });
  });

  it('should invoke callback if disconnecting without conection', function(done) {
    var mc = mconn(uniqstr(), TEST_URI, testLogger);
    mc.disconnect(done);
  });

  it('should invoke callback with err if unable to disconnect', function(done) {
    var mc = mconn(uniqstr(), TEST_URI, testLogger);

    mc.connection().close = function(callback) {
      callback(new Error('mock err'));
    };

    mc.disconnect(function(err) {
      should.exist(err);
      err.message.should.not.eql('mock err');
      done();
    });
  });

});

describe('Ping server', function() {

  it('should succeed if db is readable', function(done) {
    var mc = mconn(uniqstr(), TEST_URI, testLogger);

    mc.connect(function(err) {
      should.not.exist(err);
      mc.ping(function(err) {
        should.not.exist(err);
        mc.disconnect(done);
      });
    });
  });

  it('should fail if disconnected', function(done) {
    var mc = mconn(uniqstr(), TEST_URI, testLogger);

    mc.connect(function(err) {
      should.not.exist(err);
      mc.disconnect(function(err) {
        should.not.exist(err);
        mc.ping(function(err) {
          should.exist(err);
          err.should.have.property('statusCode', 503);
          done();
        });
      });
    });
  });

  it('should fail if not connected', function(done) {
    var mc = mconn(uniqstr(), TEST_URI, testLogger);

    mc.ping(function(err) {
      should.exist(err);
      done();
    });
  });

});

